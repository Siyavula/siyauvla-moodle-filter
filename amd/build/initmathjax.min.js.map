{"version":3,"file":"initmathjax.min.js","sources":["../src/initmathjax.js"],"sourcesContent":["define([\"jquery\", \"core/ajax\", 'core_filters/events'], function ($, Ajax, FilterEvents) {\r\n\r\n    // Selectors and other strings defined here.\r\n    const SELECTORS = {\r\n        root: '.monassis',\r\n        mathEquation: '.latex-math',\r\n        classes: {\r\n            filterMathjax: 'filter_mathjaxloader_equation'\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n\r\n        init: function () {\r\n\r\n            // Parent element of the questions.\r\n            var root = document.querySelector(SELECTORS.root);\r\n\r\n            const updateMathJax = () => {\r\n                if (root.querySelectorAll(SELECTORS.mathEquation).length !== 0) {\r\n                    // Initialise MathJax typesetting.\r\n                    // Add additional filtermathjax class for fetch the list of nodes needed for filter.\r\n                    root.querySelectorAll(SELECTORS.mathEquation).forEach(\r\n                        (e) => e.classList.add(SELECTORS.classes.filterMathjax)\r\n                    );\r\n\r\n                    // Notifiy the siyavula filtered content are updated.\r\n                    FilterEvents.notifyFilterContentUpdated(root);\r\n\r\n                    // Ensure MathJax is ready before triggering typeset\r\n                    if (window.MathJax) {\r\n                        if (window.MathJax.Hub.queue.pending) {\r\n                            window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub, root]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Callaback to the observer.\r\n            function callback(mutationList, observer) {\r\n                // console.log('mutation', mutationList);\r\n                for (const mutation of mutationList) {\r\n\r\n                    // Nodes are added inside the root.\r\n                    if (mutation.type === \"childList\") {\r\n                        updateMathJax();\r\n                    }\r\n                }\r\n            };\r\n\r\n            // Create observer for the monassis root, wait untill the contens are loadded.\r\n            const observer = new MutationObserver(callback);\r\n\r\n            // Start observing the monassis root for initiate the mathjax filter.\r\n            observer.observe(root, { childList: true, subtree: true });\r\n\r\n            updateMathJax();\r\n        },\r\n    };\r\n});\r\n"],"names":["define","$","Ajax","FilterEvents","SELECTORS","filterMathjax","init","root","document","querySelector","updateMathJax","querySelectorAll","length","forEach","e","classList","add","notifyFilterContentUpdated","window","MathJax","Hub","queue","pending","Queue","MutationObserver","mutationList","observer","mutation","type","observe","childList","subtree"],"mappings":"AAAAA,qCAAO,CAAC,SAAU,YAAa,wBAAwB,SAAUC,EAAGC,KAAMC,oBAGhEC,eACI,YADJA,uBAEY,cAFZA,kBAGO,CACLC,cAAe,uCAKhB,CAEHC,KAAM,eAGEC,KAAOC,SAASC,cAAcL,sBAE5BM,cAAgB,KAC2C,IAAzDH,KAAKI,iBAAiBP,wBAAwBQ,SAG9CL,KAAKI,iBAAiBP,wBAAwBS,SACzCC,GAAMA,EAAEC,UAAUC,IAAIZ,kBAAkBC,iBAI7CF,aAAac,2BAA2BV,MAGpCW,OAAOC,SACHD,OAAOC,QAAQC,IAAIC,MAAMC,SACzBJ,OAAOC,QAAQC,IAAIG,MAAM,CAAC,UAAWL,OAAOC,QAAQC,IAAKb,SAmBxD,IAAIiB,2BAZHC,aAAcC,cAEvB,MAAMC,YAAYF,aAGG,cAAlBE,SAASC,MACTlB,mBASHmB,QAAQtB,KAAM,CAAEuB,WAAW,EAAMC,SAAS,IAEnDrB"}